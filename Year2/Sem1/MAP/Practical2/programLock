Program 1
Execution stack:
	ref(int) v1
	ref(int) v2
int x
int q
new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	ref(int) v2
int x
int q
new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	v1: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	ref(int) v2
	int x
int q
new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	v1: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	int x
int q
new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	v1: ref(int)[0]
	v2: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	int x
	int q
new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	v1: ref(int)[0]
	v2: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	int q
new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	x: int(0)
	v1: ref(int)[0]
	v2: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	int q
	new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	x: int(0)
	v1: ref(int)[0]
	v2: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	new(v1, int(20))
new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(0)
	v1: ref(int)[0]
	v2: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	new(v1, int(20))
	new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(0)
	v1: ref(int)[0]
	v2: ref(int)[0]

Output:

Heap:

Lock table:

-------------------------------
Program 1
Execution stack:
	new(v2, int(30))
NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(0)
	v1: ref(int)[1]
	v2: ref(int)[0]

Output:

Heap:
	1: int(20)

Lock table:

-------------------------------
Program 1
Execution stack:
	new(v2, int(30))
	NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(0)
	v1: ref(int)[1]
	v2: ref(int)[0]

Output:

Heap:
	1: int(20)

Lock table:

-------------------------------
Program 1
Execution stack:
	NewLock(x)
Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:

-------------------------------
Program 1
Execution stack:
	NewLock(x)
	Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:

-------------------------------
Program 1
Execution stack:
	Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1

-------------------------------
Program 1
Execution stack:
	Fork
{
Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)
}
	NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1

-------------------------------
Program 1
Execution stack:
	NewLock(q)
Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1

-------------------------------
Program 2
Execution stack:
	Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1

-------------------------------
Program 1
Execution stack:
	NewLock(q)
	Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(0)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1

-------------------------------
Program 2
Execution stack:
	Fork
{
Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)
}
	Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1

-------------------------------
Program 1
Execution stack:
	Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 2
Execution stack:
	Lock(x)
HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 3
Execution stack:
	Lock(x)
HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 1
Execution stack:
	Fork
{
Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)
}
	NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 2
Execution stack:
	Lock(x)
	HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 3
Execution stack:
	Lock(x)
	HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 1
Execution stack:
	NOP
NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 2
Execution stack:
	HeapWrite(v1, HeapRead(v1) * int(10))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 3
Execution stack:
	Lock(x)
	HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 4
Execution stack:
	Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 1
Execution stack:
	NOP
	NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 2
Execution stack:
	HeapWrite(v1, HeapRead(v1) * int(10))
	Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 3
Execution stack:
	Lock(x)
	HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 4
Execution stack:
	Fork
{
Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)
}
	Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(20)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 1
Execution stack:
	NOP
NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 2
Execution stack:
	Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 3
Execution stack:
	Lock(x)
	HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 4
Execution stack:
	Lock(q)
HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 5
Execution stack:
	Lock(q)
HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 2
	2: -1

-------------------------------
Program 1
Execution stack:
	NOP
	NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: -1

-------------------------------
Program 2
Execution stack:

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: -1

-------------------------------
Program 3
Execution stack:
	HeapWrite(v1, HeapRead(v1) - int(1))
Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: -1

-------------------------------
Program 4
Execution stack:
	Lock(q)
	HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: -1

-------------------------------
Program 5
Execution stack:
	Lock(q)
	HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: -1

-------------------------------
Program 1
Execution stack:
	NOP
NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 3
Execution stack:
	HeapWrite(v1, HeapRead(v1) - int(1))
	Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 4
Execution stack:
	HeapWrite(v2, HeapRead(v2) * int(10))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 5
Execution stack:
	Lock(q)
	HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(200)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 1
Execution stack:
	NOP
	NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 3
Execution stack:
	Unlock(x)

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 4
Execution stack:
	HeapWrite(v2, HeapRead(v2) * int(10))
	Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 5
Execution stack:
	Lock(q)
	HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(30)

Lock table:
	1: 3
	2: 4

-------------------------------
Program 1
Execution stack:
	NOP
Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 4

-------------------------------
Program 3
Execution stack:

Symbol table:
	x: int(1)
	q: int(0)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 4

-------------------------------
Program 4
Execution stack:
	Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 4

-------------------------------
Program 5
Execution stack:
	Lock(q)
	HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 4

-------------------------------
Program 1
Execution stack:
	NOP
	Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 4
Execution stack:

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 5
Execution stack:
	HeapWrite(v2, HeapRead(v2) + int(5))
Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 1
Execution stack:
	Lock(x)
Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 5
Execution stack:
	HeapWrite(v2, HeapRead(v2) + int(5))
	Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(300)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 1
Execution stack:
	Lock(x)
	Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 5
Execution stack:
	Unlock(q)

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: 5

-------------------------------
Program 1
Execution stack:
	Print(HeapRead(v1))
Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: 1
	2: -1

-------------------------------
Program 5
Execution stack:

Symbol table:
	x: int(1)
	q: int(2)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: 1
	2: -1

-------------------------------
Program 1
Execution stack:
	Print(HeapRead(v1))
	Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: 1
	2: -1

-------------------------------
Program 1
Execution stack:
	Unlock(x)
Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: 1
	2: -1

-------------------------------
Program 1
Execution stack:
	Unlock(x)
	Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: 1
	2: -1

-------------------------------
Program 1
Execution stack:
	Lock(q)
Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 1
Execution stack:
	Lock(q)
	Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: -1

-------------------------------
Program 1
Execution stack:
	Print(HeapRead(v2))
Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: 1

-------------------------------
Program 1
Execution stack:
	Print(HeapRead(v2))
	Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: 1

-------------------------------
Program 1
Execution stack:
	Unlock(q)

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)
	int(305)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: 1

-------------------------------
Program 1
Execution stack:

Symbol table:
	q: int(2)
	x: int(1)
	v1: ref(int)[1]
	v2: ref(int)[2]

Output:
	int(199)
	int(305)

Heap:
	1: int(199)
	2: int(305)

Lock table:
	1: -1
	2: -1

-------------------------------
