     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  ; extern printf
     8                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     9                                  extern printf
    10                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    11                                  import printf msvcrt.dll
    12                                   ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    13                                  
    14                                  ; our data is declared here (the variables needed by our program)
    15                                  segment data use32 class=data
    16 00000000 02                          a DB 2
    17 00000001 03                          b DB 3
    18 00000002 04                          c DB 4
    19 00000003 0A00                        d DW 10
    20 00000005 0A                          newline DB 10
    21 00000006 4E756D626572206973-         format DB 'Number is: %d\n', 0
    21 0000000F 3A2025645C6E00     
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26                                      ;ax = b * c
    27 00000000 A0[01000000]                    mov al, [b] ;al = b
    28 00000005 F625[02000000]                  mul byte [c] ;ax = al * c = b * c
    29                                      ;bx = b * c (keep the result in a separate place to free up ax)
    30 0000000B 6689C3                          mov bx, ax ;bx = ax = b * c
    31                                      ;ax = b * 2
    32 0000000E B002                            mov al, 2
    33 00000010 F625[01000000]                  mul byte [b]
    34                                      ;ax = ax + d = 2b + d
    35 00000016 660305[03000000]                add ax, [d]
    36                                      ;ax = ax - bx = 2b + d - bc = d - bc + 2b
    37 0000001D 6629D8                          sub ax, bx
    38                                      ;al = (d - bc + 2b) / a
    39                                      ;ah = (d - bc + 2b) % a
    40 00000020 F635[00000000]                  div byte [a]
    41                                          
    42 00000026 50                              push eax
    43 00000027 68[06000000]                    push dword format
    44                                          
    45 0000002C FF15[00000000]                  call [printf]
    46                                           
    47 00000032 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    48 00000034 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
