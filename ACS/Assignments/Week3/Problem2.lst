     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; Declare the variables needed by the program
    14 00000000 0500                        e DW 5
    15 00000002 0300                        g DW 3
    16 00000004 01                          b DB 1
    17 00000005 02                          c DB 2
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; The program computes (e+g-2*b)/(a+b)  #26 in the problem list
    23                                          
    24                                          ; Compute 2*b and store it in a separate register
    25 00000000 A0[04000000]                    mov al, [b] ; AL = b (b is a byte)
    26 00000005 66BB0200                        mov bx, 2 ; temporarily store 2 into bx for the next multiplication
    27 00000009 66F7E3                          mul bx ; AX = AL * 2 (this mul returns a word)
    28 0000000C 6689C3                          mov bx, ax ; BX = AX
    29                                          
    30                                          ; Compute e + g - 2*b
    31 0000000F 66A1[00000000]                  mov ax, [e] ; AX = e (e is a word)
    32 00000015 660305[02000000]                add ax, [g] ; AX = e + b
    33 0000001C 6629D8                          sub ax, bx ; AX = AX - BX = e + g - 2*b
    34                                          
    35                                          ; Divide by c
    36 0000001F F635[05000000]                  div byte [c] ; AL = AX / b and AH = AX % b, but we only care about AL in this case
    37                                      
    38                                          ; exit(0)
    39 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
