     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; Here we declare the variables used by our program
    14 00000000 01                          a DB 1
    15 00000001 03                          b DB 3
    16 00000002 07                          c DB 7
    17 00000003 05                          d DB 5
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; This program computes (b+c)+(a+b-d)  #29 on the assignment list
    23                                          
    24                                          ; First paranthesis
    25 00000000 A0[01000000]                    mov al, [b] ; AX = b
    26 00000005 0205[02000000]                  add al, [c] ; AX = b + c
    27                                          
    28                                          ; Second paranthesis
    29 0000000B 8A1D[00000000]                  mov bl, [a] ; BX = a
    30 00000011 021D[01000000]                  add bl, [b] ; BX = a + b
    31 00000017 2A1D[03000000]                  sub bl, [d] ; BX = a + b - d
    32                                  
    33                                          ; We have the first paranthesis in AX, and the second paranthesis in BX
    34                                          ; We just have to add them up now
    35                                          
    36 0000001D 00D8                            add al, bl ; AX = (b + c) + (a + b - d)
    37                                          
    38                                          ; exit(0)
    39 0000001F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000021 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
