     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 0F000000                    a DD 15
    14 00000004 01                          b DB 1
    15 00000005 06                          c DB 6
    16 00000006 03                          d DB 3
    17 00000007 0500000000000000            x DQ 5
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; a-(7+x)/(b*b-c/d+2); a-doubleword; b,c,d-byte; x-qword
    23                                          
    24                                          ; c/d
    25 00000000 A0[05000000]                    mov AL, [c]  ; AL = c
    26 00000005 6698                            cbw  ; AX = c
    27 00000007 F63D[06000000]                  idiv byte [d]  ; AL = AX/d = c/d
    28 0000000D 6698                            cbw  ; AX = AL = c/d
    29 0000000F 6689C3                          mov BX, AX  ; BX = c/d
    30                                          
    31                                          ; b*b
    32 00000012 A0[04000000]                    mov AL, [b]  ; AL = b
    33 00000017 F62D[04000000]                  imul byte [b]  ; AX = AL * b = b*b
    34                                          
    35                                          ; b*b-c/d+2
    36 0000001D 6629D8                          sub AX, BX  ; AX = b*b - c/d
    37 00000020 6683C002                        add AX, 2  ; AX = b*b - c/d + 2
    38 00000024 6699                            cwd  ; EAX = AX
    39                                          
    40                                          ; Save that result in EBX
    41 00000026 89C3                            mov EBX, EAX  ; BX = (b*b-c/d+2)
    42                                          
    43                                          ; 7+x in EDX:EAX
    44 00000028 A1[07000000]                    mov EAX, [x]  ; Low dword
    45 0000002D 8B15[0B000000]                  mov EDX, [x + 4]  ; High dword
    46 00000033 83C007                          add EAX, 7  ; EDX:EAX = 7 + x
    47                                          
    48                                          ; (7+x)/(b*b-c/d+2)
    49 00000036 F7FB                            idiv EBX  ; EAX = (7+a)/(b*b - c/d + 2)
    50                                          
    51                                          ; a - (7+x)/(b*b-c/d+2)
    52 00000038 8B1D[00000000]                  mov EBX, [a]  ; EBX = a
    53 0000003E 29C3                            sub EBX, EAX  ; EBX = a-(7+x)/(b*b-c/d+2)
    54                                      
    55 00000040 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    56 00000042 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
