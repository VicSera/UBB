     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  extern printf
     9                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    10                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    11                                  import printf msvcrt.dll
    12                                                            
    13                                  ; our data is declared here (the variables needed by our program)
    14                                  segment data use32 class=data
    15 00000000 616E6120617265206D-         a db 'ana are mere'
    15 00000009 657265             
    16                                      len_a equ $ - a
    17                                      
    18 0000000C 416E4120617245204D-         b db 'AnA arE Mere'
    18 00000015 657265             
    19                                      len_b equ $ - b
    20                                      
    21 00000018 4E722E206964656E74-         format db 'Nr. identical characters is %d', 10, 0  ; %d for decimal, %x hexa, 
    21 00000021 6963616C2063686172-
    21 0000002A 616374657273206973-
    21 00000033 2025640A00         
    22                                      
    23                                  ; our code starts here
    24                                  segment code use32 class=code
    25                                      start:
    26 00000000 BE[00000000]                    mov esi, a
    27 00000005 BF[0C000000]                    mov edi, b
    28 0000000A FC                              cld ; l->r
    29                                          
    30 0000000B BB00000000                      mov ebx, 0
    31                                          
    32 00000010 B90C000000                      mov ecx, len_a
    33 00000015 E306                            jecxz the_end
    34                                          
    35                                          my_loop:
    36 00000017 A6                                  cmpsb  ; cmp [esi], [edi]
    37 00000018 7501                                jne noincrement
    38 0000001A 43                                      inc ebx
    39                                              
    40                                              noincrement:
    41 0000001B E2FA                                loop my_loop
    42                                          
    43                                          the_end:
    44                                          
    45                                          ; printf(format, ebx) parameters get pushed from right to left
    46 0000001D 53                              push ebx
    47 0000001E 68[18000000]                    push format
    48 00000023 FF15[00000000]                  call [printf]
    49 00000029 83C408                          add esp, 4*2 ; <=> pop eax, pop eax
    50                                      
    51                                          ; exit(0)
    52 0000002C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    53 0000002E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
