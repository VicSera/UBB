     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 616E6120617265206D-         a db 'ana are mere'
    13 00000009 657265             
    14                                      len_a equ $ - a
    15                                      
    16 0000000C 6165696F754145494F-         voc db 'aeiouAEIOU'
    16 00000015 55                 
    17                                      len_voc equ $ - voc
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22 00000000 BE[00000000]                    mov esi, a
    23 00000005 BF[0C000000]                    mov edi, voc
    24                                          
    25 0000000A FC                              cld
    26                                          
    27 0000000B B90C000000                      mov ecx, len_a
    28 00000010 E31A                            jecxz end
    29                                          
    30 00000012 BB00000000                      mov ebx, 0  ; vowel counter
    31                                          
    32                                          loop_1:
    33 00000017 AC                                  lodsb  ; get element from a into AL
    34 00000018 51                                  push ecx
    35                                              
    36 00000019 B90A000000                          mov ecx, len_voc
    37                                              loop_2:
    38 0000001E AE                                      scasb  ; cmp AL, [edi], inc edi
    39 0000001F 7501                                    jne noincrement
    40 00000021 43                                      inc ebx  ; found a vowel
    41                                                  
    42                                                  noincrement:
    43 00000022 E2FA                                    loop loop_2
    44                                                  
    45 00000024 59                                  pop ecx
    46 00000025 BF[0C000000]                        mov edi, voc  ; reinitialize edi to the beginning of the string of vowels
    47                                              
    48 0000002A E2EB                                loop loop_1
    49                                          
    50                                          end:
    51                                          
    52                                          ; ebx now stores the number of vowels found in the string a
    53                                          
    54 0000002C 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    55 0000002E FF15[00000000]                  call    [exit]       ; call exit to terminate the program
