     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 01020304050601              s DB 1, 2, 3, 4, 5, 6, 1
    14                                      len EQU $ - s
    15                                  
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ; A byte string S is given. Obtain the maximum of the elements found on the even positions and the minimum of the elements found on the odd positions of S.
    20                                          ; for (i = 0; i < len(s)/2; i++)
    21                                          ;   if (a[2i] > max)
    22                                          ;       max = a[2i]
    23                                          ;   if (a[2i+1] < min)
    24                                          ;       min = a[2i+1]
    25                                          ; if len(s) % 2 == 1
    26                                          ;   if a[len(s) - 1] > max
    27                                          ;       max = a[len(s) - 1]
    28                                      
    29 00000000 B907000000                      mov ecx, len ; num iterations
    30 00000005 BE00000000                      mov esi, 0 ; index
    31                                          
    32 0000000A B0FF                            mov al, 0xFF ; min
    33 0000000C B300                            mov bl, 0 ; max
    34                                          
    35                                          my_loop:
    36 0000000E 3A9E[00000000]                  cmp bl, [s + esi]
    37 00000014 7306                            jae max_ok
    38                                          ; else update max
    39 00000016 8A9E[00000000]                  mov bl, [s + esi]
    40                                         
    41                                          max_ok: ; max was updated
    42                                          ; final sir?
    43 0000001C 49                              dec ecx
    44 0000001D 83F900                          cmp ecx, 0
    45 00000020 7416                            je the_end
    46                                          
    47 00000022 46                              inc esi
    48 00000023 3A86[00000000]                  cmp al, [s + esi]
    49 00000029 7606                            jbe min_ok
    50                                          ; else update min
    51 0000002B 8A86[00000000]                  mov al, [s + esi]
    52                                          
    53                                          min_ok:
    54 00000031 46                              inc esi
    55 00000032 49                              dec ecx
    56 00000033 83F900                          cmp ecx, 0
    57 00000036 75D6                            jne my_loop
    58                                          
    59                                          the_end: ; we reached the end of the string
    60                                     
    61                                          ; exit(0)
    62 00000038 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    63 0000003A FF15[00000000]                  call    [exit]       ; call exit to terminate the program
