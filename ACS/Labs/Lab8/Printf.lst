     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                                            
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 010000000200000003-         a DD 1, 2, 3, 10, 14, 20
    14 00000009 0000000A0000000E00-
    14 00000012 000014000000       
    15                                      len EQU ($ - a) / 4
    16 00000018 615B25645D203D2025-         format DB "a[%d] = %d", 10, 0
    16 00000021 640A00             
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21 00000000 BE[00000000]                    mov esi, a
    22 00000005 B906000000                      mov ecx, len
    23 0000000A FC                              cld
    24 0000000B BB00000000                      mov ebx, 0
    25                                          
    26                                          my_loop:
    27 00000010 AD                                  lodsd
    28                                              
    29 00000011 60                                  pusha
    30                                              
    31 00000012 50                                  push eax
    32 00000013 53                                  push ebx
    33 00000014 68[18000000]                        push format
    34                                              
    35 00000019 FF15[00000000]                      call [printf]
    36                                              
    37 0000001F 83C40C                              add esp, 4 * 3
    38                                              
    39 00000022 61                                  popa
    40                                              
    41 00000023 43                                  inc ebx
    42 00000024 E2EA                                loop my_loop
    43                                      
    44                                          ; exit(0)
    45 00000026 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    46 00000028 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
