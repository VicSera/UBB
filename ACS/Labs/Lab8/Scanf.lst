     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, printf, scanf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import printf msvcrt.dll
    11                                  import scanf msvcrt.dll
    12                                  ; our data is declared here (the variables needed by our program)
    13                                  segment data use32 class=data
    14 00000000 00000000<rept>              a times 100 DD 0
    15 00000190 00000000                    len DD 0
    16 00000194 256400                      format DB "%d", 0
    17 00000197 6C656E3D00                  msg_len DB "len=", 0
    18 0000019C 615B25645D203D2000          msg_elem DB "a[%d] = ", 0
    19                                  
    20                                  ; our code starts here
    21                                  segment code use32 class=code
    22                                      start:
    23 00000000 68[97010000]                    push msg_len
    24 00000005 FF15[00000000]                  call [printf]
    25 0000000B 83C404                          add esp, 4
    26                                          
    27                                          ; scanf
    28 0000000E 68[90010000]                    push len
    29 00000013 68[94010000]                    push format
    30 00000018 FF15[00000000]                  call [scanf]
    31 0000001E 83C408                          add esp, 4 * 2
    32                                          
    33 00000021 8B0D[90010000]                  mov ecx, [len]
    34 00000027 E331                            jecxz the_end
    35                                          
    36 00000029 BB00000000                      mov ebx, 0  ; index
    37 0000002E BF[00000000]                    mov edi, a
    38 00000033 FC                              cld
    39                                          
    40                                          my_loop:
    41 00000034 60                                  pusha
    42                                              
    43                                              ;printf(msg_elem, ebx)
    44 00000035 53                                  push ebx
    45 00000036 68[9C010000]                        push msg_elem
    46 0000003B FF15[00000000]                      call [printf]
    47 00000041 83C408                              add esp, 4 * 2
    48                                              
    49                                              ;scanf(format, edi)
    50 00000044 57                                  push edi
    51 00000045 68[94010000]                        push format
    52 0000004A FF15[00000000]                      call [scanf]
    53 00000050 83C408                              add esp, 4 * 2
    54                                              
    55 00000053 61                                  popa
    56 00000054 83C704                              add edi, 4  ;  go to next elem
    57 00000057 43                                  inc ebx
    58                                              
    59 00000058 E2DA                                loop my_loop
    60                                              
    61                                          
    62                                          the_end:
    63                                      
    64                                          ; exit(0)
    65 0000005A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 0000005C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
