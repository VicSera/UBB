     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 7B00                        a dw 123 
    14 00000002 040D                        b dw 3332
    15 00000004 00000000                    c dd 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; Implementation of problem 20
    21                                          
    22                                          ; 4
    23 00000000 B900000000                      mov ecx, 0  ; make all the bits of ecx 0, which will be the temporary storage for c
    24                                          
    25                                          ; 1
    26 00000005 66A1[00000000]                  mov ax, [a]
    27 0000000B 6625F801                        and ax, 0000000111111000b  ; isolate bits 3-8 in ax
    28 0000000F 66C1E803                        shr ax, 3  ; move bits 3-8 to 0-5
    29                                          
    30                                          ; 2
    31 00000013 668B1D[02000000]                mov bx, [b]
    32 0000001A 6683E31C                        and bx, 0000000000011100b  ; isolate bits 2-4 in bx
    33 0000001E 66C1E304                        shl bx, 4  ; move bits 2-4 to 6-8
    34 00000022 6609D9                          or cx, bx  ; make bits 6-8 in cx = 6-8 in bx = 2-4 in b
    35                                          
    36                                          ; 3
    37 00000025 66A1[00000000]                  mov ax, [a]
    38 0000002B 6625C01F                        and ax, 0001111111000000b  ; isolate bits 6-12 in ax
    39 0000002F 66C1E003                        shl ax, 3  ; move bits 6-12 to 9-15
    40 00000033 6609C1                          or cx, ax  ; make bits 9-15 in cx = bits 9-16 in bx = bits 6-12 in a
    41                                          
    42                                          ; Now, ecx = c
    43                                          
    44 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    45 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
