     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start  
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 E6AD                        a dw 1010110111100110b
    15 00000002 00000000                    b dd 0
    16                                      
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; Implementation of problem 18
    21                                          ; 1
    22 00000000 BB00000000                      mov ebx, 0  ; 0-3 bits of B have value 0 (i)
    23                                          
    24                                          ; 2
    25 00000005 66A1[00000000]                  mov ax, [a]
    26 0000000B 6625000F                        and ax, 0000111100000000b  ; mask that keeps only the 8-11 bits of a
    27 0000000F 66C1E804                        shr ax, 4  ; ax = 0000000011110000b  ; move 8-11 to 4-7
    28 00000013 6609C3                          or bx, ax  ; change bits 4-7 in bx to the bits 4-7 in ax, which are 8-11 of a
    29                                          
    30                                          ; 3
    31 00000016 66A1[00000000]                  mov ax, [a]  ; ax = a
    32 0000001C 66F7D0                          not ax  ; invert all the bits
    33 0000001F 6683E003                        and ax, 0000000000000011b  ; isolate the first 2 bits
    34 00000023 66C1E008                        shl ax, 8  ; shift bits 0-1 to 8-9
    35 00000027 6609C3                          or bx, ax  ; change bits 8-9 in bx
    36 0000002A 66C1E002                        shl ax, 2  ; shift bits 8-9 to 10-11
    37 0000002E 6609C3                          or bx, ax  ; change bits 10-11 in bx
    38                                          
    39                                          ; 4
    40 00000031 6681CB00F0                      or bx, 1111000000000000b  ; make bits 12-15 of bx 1
    41                                          ; the same as or bh, 11110000b
    42                                          
    43                                          ; 5
    44 00000036 6689D8                          mov ax, bx  ; save the lower bits of bx in ax
    45 00000039 C1E310                          shl ebx, 16  ; move the lower part of ebx to the higher part of ebx
    46 0000003C 6609C3                          or bx, ax  ; same as mov bx, ax, this is to restore the lower part of ebx
    47                                          
    48                                          ; exit(0)
    49 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
