     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, scanf, fprintf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fclose msvcrt.dll
    12                                  import scanf msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                                            
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00000000                    fd DD 0
    19 00000004 <res 0000001E>              file_name resb 30
    20 00000022 25732000                    print_format db '%s ', 0
    21 00000026 7700                        mode_write db 'w', 0
    22 00000028 5468697320776F7264-         debug_format db 'This word has %d vowels', 10, 0
    22 00000031 206861732025642076-
    22 0000003A 6F77656C730A00     
    23                                      
    24 00000041 257300                      scan_format db '%s', 0
    25 00000044 <res 0000001E>              current_word resb 30
    26                                      
    27 00000062 6165696F754145494F-         vowels db 'aeiouAEIOU'
    27 0000006B 55                 
    28                                      vow_len equ $ - vowels
    29                                  
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      count_vowels:
    33 00000000 55                              push ebp
    34 00000001 89E5                            mov ebp, esp
    35                                          
    36 00000003 8B7508                          mov esi, [ebp + 8]
    37 00000006 BB00000000                      mov ebx, 0
    38                                          
    39                                          for_char:
    40 0000000B AC                                  lodsb ; al = current char in string
    41                                              
    42 0000000C 3C00                                cmp al, 0 ; check if we're at the end of the word
    43 0000000E 7414                                je return
    44                                              
    45 00000010 B90A000000                          mov ecx, vow_len
    46                                              for_vowel:
    47 00000015 3A81[61000000]                          cmp al, [vowels + ecx - 1]
    48 0000001B 7503                                    jne next
    49                                                  
    50 0000001D 43                                      inc ebx
    51 0000001E EBEB                                    jmp for_char
    52                                                  
    53                                                  next:
    54 00000020 E2F3                                    loop for_vowel
    55 00000022 EBE7                                jmp for_char
    56                                          
    57                                          return:
    58 00000024 89D8                            mov eax, ebx
    59                                          
    60 00000026 5D                              pop ebp
    61 00000027 C3                              ret
    62                                          
    63                                      start:
    64                                          ; scanf('%s', file_name)
    65 00000028 68[04000000]                    push file_name
    66 0000002D 68[41000000]                    push scan_format
    67 00000032 FF15[00000000]                  call [scanf]
    68 00000038 83C408                          add esp, 4 * 2
    69                                          
    70                                          ; fopen(file_name, 'w')
    71 0000003B 68[26000000]                    push mode_write
    72 00000040 68[04000000]                    push file_name
    73 00000045 FF15[00000000]                  call [fopen]
    74 0000004B 83C408                          add esp, 4 * 2
    75                                          
    76 0000004E A3[00000000]                    mov [fd], eax
    77                                          
    78 00000053 83F800                          cmp eax, 0
    79 00000056 745A                            je the_end
    80                                          
    81                                          read_word:
    82                                              ; scanf('%s', current_word)
    83 00000058 68[44000000]                        push current_word
    84 0000005D 68[41000000]                        push scan_format
    85 00000062 FF15[00000000]                      call [scanf]
    86 00000068 83C408                              add esp, 4 * 2
    87                                              
    88 0000006B 803D[44000000]24                    cmp byte [current_word], '$'
    89 00000072 742F                                je close_file
    90                                              
    91 00000074 68[44000000]                        push current_word
    92 00000079 E882FFFFFF                          call count_vowels ; eax now has the number of vowels in the current word
    93 0000007E 83C404                              add esp, 4 * 1
    94                                              
    95 00000081 A901000000                          test eax, 1 ; check parity
    96 00000086 75D0                                jnz read_word
    97                                              
    98                                              ; call fprintf(fd, format, string)
    99 00000088 68[44000000]                        push current_word
   100 0000008D 68[22000000]                        push print_format
   101 00000092 FF35[00000000]                      push dword [fd]
   102 00000098 FF15[00000000]                      call [fprintf]
   103 0000009E 83C40C                              add esp, 4 * 3
   104                                          
   105 000000A1 EBB5                                jmp read_word
   106                                      
   107                                          close_file:
   108                                          ; fclose(fd)
   109 000000A3 FF35[00000000]                  push dword [fd]
   110 000000A9 FF15[00000000]                  call [fclose]
   111 000000AF 83C404                          add esp, 4 * 1
   112                                      
   113                                          the_end:
   114                                      
   115                                          ; exit(0)
   116 000000B2 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   117 000000B4 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
