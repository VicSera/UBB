program := ["pack" package_name] [import_list] statement_list

statement_list := statement ["\n" statement_list]
statement := simple_statement | struct_statement

simple_statement := declaration | assignment_statement | io_statement
struct_statement := block_statement | if_statement | while_statement

declaration := ("imm" | "mut") typed_identifier
typed_identifier := identifier ":" type
typed_identifier_list := typed_identifier ["," typed_identifier_list]
assignment_statement := identifier "=" expression
io_statement := "input" | "output" "(" identifier ")"

block_statement := "{" statement_list "}"
if_statement := "if" condition "->" statement ["else ->" statement]
while_statement := "while" condition "->" statement

type := primitive[array_declaration] | (class_name ["<" class_list ">"])
primitive := "bool" | "char" | "int" | "real"
class_declaration := "class" class_name [generic]
generic := "<" generic_parameter_list ">"
generic_parameter_list := generic_parameter ["," generic_parameter_list]
generic_parameter := identifier ":" class_name
class_list := class_name [',' class_list]
array_declaration := "[" nr "]"
class_name := letter [{letter}]
letter := "a" | ... | "z" | "A" | ... | "Z"

expression := expression arithmetic_operator term | "(" expression ")" [arithmetic_operator term]
term := identifier | expression
arithmetic_operator := "+" | "-" | "*" | "/" | "^"

package := [prefix "."] package_name
package_name := identifier
import_statement := "!borrow" package_name
import_list := import_statement [import_list]

function_declaration := "funk" identifier ["(" [typed_identifier_list] ")"] "{" [statement_list] "}"
condition := expression relation expression

relation := "<" | "<=" | "=" | "<>" | ">=" | ">"
