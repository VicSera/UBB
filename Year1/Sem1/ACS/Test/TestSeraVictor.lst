     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, fprintf, fopen, fclose, printf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import scanf msvcrt.dll
    11                                  import fprintf msvcrt.dll
    12                                  import fopen msvcrt.dll
    13                                  import fclose msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 00000000                    N dd 0
    19 00000004 00                          current_word db 0
    20                                      
    21 00000005 66696C652E74787400          file_name db 'file.txt', 0
    22 0000000E 7700                        access_mode db 'w', 0
    23 00000010 00000000                    file_descriptor dd 0
    24                                      
    25 00000014 256400                      scan_number_format db '%d', 0
    26 00000017 257300                      scan_word_format db '%s', 0
    27 0000001A 25732000                    print_format db '%s ', 0
    28 0000001E 25640A00                    print_number_format db '%d', 10, 0
    29 00000022 436F6D706172696E67-         compare_format db 'Comparing %d with %d', 10, 0
    29 0000002B 202564207769746820-
    29 00000034 25640A00           
    30                                      
    31 00000038 6165696F754145494F-         vowels db 'aeiouAEIOU'
    31 00000041 55                 
    32                                      len_vowels equ 10
    33                                  
    34                                  ; our code starts here
    35                                  segment code use32 class=code
    36                                      count_vowels:
    37 00000000 55                              push ebp
    38 00000001 89E5                            mov ebp, esp
    39                                          
    40 00000003 8B7508                          mov esi, [ebp + 8] ; esi now has the starting address of the current word
    41 00000006 BA00000000                      mov edx, 0
    42                                          
    43                                          for_char:
    44 0000000B AC                                  lodsb ; al now has current the character
    45                                              
    46                                              ; check if we're at \0
    47 0000000C 3C00                                cmp al, 0
    48 0000000E 7414                                je return
    49                                              
    50                                              ; otherwise, check if the current character is a vowel
    51 00000010 B90A000000                          mov ecx, len_vowels
    52                                              for_vowel:
    53 00000015 3A81[37000000]                          cmp al, byte [vowels + ecx - 1]
    54 0000001B 7404                                    je is_vowel
    55                                                  
    56 0000001D E2F6                                    loop for_vowel
    57                                              
    58 0000001F EBEA                                jmp for_char
    59                                              is_vowel:
    60 00000021 42                                      inc edx
    61 00000022 EBE7                                    jmp for_char
    62                                                  
    63                                          return:
    64 00000024 89D0                            mov eax, edx
    65                                          
    66 00000026 5D                              pop ebp
    67 00000027 C3                              ret
    68                                      start:
    69                                          ; read a number N from console
    70                                          ; read multiple words until # is read
    71                                          ; write in a text file only the words that have N vowels
    72                                      
    73                                          ; open file
    74                                          ; fopen(file_name, access_mode)
    75 00000028 68[0E000000]                    push dword access_mode
    76 0000002D 68[05000000]                    push dword file_name
    77 00000032 FF15[00000000]                  call [fopen]
    78 00000038 83C408                          add esp, 4 * 2
    79                                          
    80                                          ; store the file descriptor
    81 0000003B A3[10000000]                    mov [file_descriptor], eax
    82                                          
    83                                          ; if file was not opened correctly, end the program
    84 00000040 83F800                          cmp eax, 0
    85 00000043 746E                            je the_end
    86                                      
    87                                          ; read N from the keyboard
    88                                          ; scanf('%d', &N)
    89 00000045 68[00000000]                    push dword N
    90 0000004A 68[14000000]                    push dword scan_number_format
    91 0000004F FF15[00000000]                  call [scanf]
    92 00000055 83C408                          add esp, 4 * 2
    93                                          
    94                                          ; start reading words
    95                                          for_word:
    96                                              ; scanf('%s', current_word)
    97 00000058 68[04000000]                        push dword current_word
    98 0000005D 68[17000000]                        push dword scan_word_format
    99 00000062 FF15[00000000]                      call [scanf]
   100 00000068 83C408                              add esp, 4 * 2
   101                                              
   102                                              ; check for #
   103 0000006B 803D[04000000]23                    cmp byte [current_word], '#'
   104 00000072 7430                                je close_file
   105                                              
   106                                              ; the word that was read in not #
   107 00000074 68[04000000]                        push dword current_word
   108 00000079 E882FFFFFF                          call count_vowels
   109 0000007E 83C404                              add esp, 4 * 1
   110                                                
   111                                              ; number of vowels is in eax
   112 00000081 3B05[00000000]                      cmp eax, [N]
   113 00000087 75CF                                jne for_word
   114                                              
   115                                              ; else
   116                                              ; fprintf(file_descriptor, '%s ', current_word)
   117 00000089 68[04000000]                        push dword current_word
   118 0000008E 68[1A000000]                        push dword print_format
   119 00000093 FF35[10000000]                      push dword [file_descriptor]
   120 00000099 FF15[00000000]                      call [fprintf]
   121 0000009F 83C40C                              add esp, 4 * 3
   122                                              
   123 000000A2 EBB4                                jmp for_word
   124                                              
   125                                              
   126                                          close_file:
   127                                          ; fclose(file_descriptor)
   128 000000A4 FF35[10000000]                  push dword [file_descriptor]
   129 000000AA FF15[00000000]                  call [fclose]
   130 000000B0 83C404                          add esp, 4 * 1
   131                                          
   132                                          the_end:
   133                                          ; exit(0)
   134 000000B3 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   135 000000B5 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
