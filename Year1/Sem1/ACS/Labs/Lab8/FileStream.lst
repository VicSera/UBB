     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fprintf, fopen, fclose, fscanf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fprintf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fscanf msvcrt.dll
    14                                  import printf msvcrt.dll
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18 00000000 616E612E74787400            file_name db 'ana.txt', 0
    19 00000008 696E7075742E747874-         input_file db 'input.txt', 0
    19 00000011 00                 
    20 00000012 7700                        access_mode db 'w', 0
    21 00000014 7200                        mode_read db 'r', 0
    22 00000016 00000000                    handle dd 0
    23 0000001A 00000000                    handle_input dd 0
    24                                      
    25 0000001E 00000000                    a dd 0
    26 00000022 00000000                    len dd 0
    27                                  
    28 00000026 256400                      format db '%d', 0
    29                                      
    30                                  ; our code starts here
    31                                  segment code use32 class=code
    32                                      start:
    33                                          ; fopen ( filename, access_mode )
    34                                          ; fprintf ( file_handle, format, ... )
    35                                          ; fscanf ( file_handle, format, ... )
    36                                          ; fclose ( file_handle )
    37                                      
    38                                          ; open input file
    39 00000000 68[14000000]                    push dword mode_read
    40 00000005 68[08000000]                    push dword input_file
    41 0000000A FF15[00000000]                  call [fopen]
    42 00000010 83C408                          add esp, 4 * 2
    43 00000013 A3[1A000000]                    mov [handle_input], eax
    44                                          
    45 00000018 83F800                          cmp eax, 0
    46 0000001B 0F84A5000000                    je final
    47                                          
    48 00000021 68[22000000]                    push len
    49 00000026 68[26000000]                    push dword format
    50 0000002B 68[1A000000]                    push dword handle_input
    51 00000030 FF15[00000000]                  call [fscanf]  ; read length
    52 00000036 83C40C                          add esp, 4 * 3
    53                                          
    54                                          ; print length
    55 00000039 FF35[22000000]                  push dword [len]
    56 0000003F 68[26000000]                    push dword format
    57 00000044 FF15[00000000]                  call [printf]
    58 0000004A 83C408                          add esp, 4 * 2
    59                                      
    60                                          ; open output file
    61 0000004D 68[12000000]                    push dword access_mode
    62 00000052 68[00000000]                    push dword file_name
    63 00000057 FF15[00000000]                  call [fopen]
    64                                          ; clear stack
    65 0000005D 83C408                          add esp, 4 * 2
    66                                          ; get the returned handle
    67 00000060 A3[16000000]                    mov [handle], eax
    68                                          ; check if file was opened correctly
    69 00000065 83F800                         cmp eax, 0
    70 00000068 745C                            je final
    71                                          
    72 0000006A 8B0D[22000000]                  mov ecx, [len]
    73 00000070 E354                            jecxz final
    74                                          
    75                                          do:
    76                                              ; read number from file
    77 00000072 60                                  pusha 
    78                                              
    79 00000073 68[1E000000]                        push a
    80 00000078 68[26000000]                        push format
    81 0000007D 68[1A000000]                        push handle_input
    82 00000082 FF15[00000000]                      call [fscanf] ; fscanf(input_file, format, &a)
    83 00000088 83C40C                              add esp, 4 * 3
    84                                              ; mov eax, [a]
    85                                              
    86                                              ; print the number to the output file
    87 0000008B FF35[1E000000]                      push dword [a]
    88 00000091 68[26000000]                        push format
    89 00000096 FF35[16000000]                      push dword [handle]
    90 0000009C FF15[00000000]                      call [fprintf]
    91 000000A2 83C40C                              add esp, 4 * 3
    92                                              
    93 000000A5 61                                  popa
    94 000000A6 E2CA                                loop do
    95                                              
    96                                          ; close file with fclose
    97 000000A8 FF35[16000000]                  push dword [handle]
    98 000000AE FF15[00000000]                  call [fclose]
    99 000000B4 83C404                          add esp, 4 * 1
   100                                          
   101 000000B7 FF35[08000000]                  push dword [input_file]
   102 000000BD FF15[00000000]                  call [fclose]
   103 000000C3 83C404                          add esp, 4 * 1
   104                                              
   105                                          final:
   106                                          ; exit(0)
   107 000000C6 6A00                            push    dword 0      ; push the parameter for exit onto the stack
   108 000000C8 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
