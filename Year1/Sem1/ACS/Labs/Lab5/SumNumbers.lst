     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 00010203040506              array DB 0, 1, 2, 3, 4, 5, 6
    14                                      len EQU ($ - array) / 1 ; position in the data segment - the position of a, divided by size(word)
    15                                  
    16                                  ; our code starts here
    17                                  segment code use32 class=code
    18                                      start:
    19                                          ; Get the sum of all elements in array
    20                                          
    21 00000000 B000                            mov AL, 0   ; sum
    22 00000002 B900000000                      mov ECX, 0  ; i
    23                                          
    24                                      loop:
    25 00000007 83F907                          cmp ECX, len
    26 0000000A 7D09                            jge out
    27                                          
    28 0000000C 0281[00000000]                  add AL, [array + ECX]
    29                                          
    30 00000012 41                              inc ECX ; i++
    31 00000013 EBF2                            jmp loop
    32                                          
    33                                      out:
    34                                      
    35                                          ; exit(0)
    36 00000015 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    37 00000017 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
