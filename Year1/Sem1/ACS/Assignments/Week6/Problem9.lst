     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 7878                        a DW 111100001111000b
    14 00000002 CC                          b DB 11001100b
    15 00000003 00000000                    c DD 0
    16                                  
    17                                  ; our code starts here
    18                                  segment code use32 class=code
    19                                      start:
    20                                          ; Given the word A and the byte B, compute the doubleword C as follows:
    21                                          ;  the bits 0-3 of C are the same as the bits 6-9 of A
    22                                          ;  the bits 4-5 of C have the value 1
    23                                          ;  the bits 6-7 of C are the same as the bits 1-2 of B
    24                                          ;  the bits 8-23 of C are the same as the bits of A
    25                                          ;  the bits 24-31 of C are the same as the bits of B
    26                                          
    27 00000000 8B0D[03000000]                  mov ECX, [c]  ; ECX = c = 0
    28                                      
    29                                          ; 1
    30 00000006 66A1[00000000]                  mov AX, [a]
    31 0000000C 66C1E806                        shr AX, 6  ; bits 6-9 are now 0-3
    32 00000010 2407                            and AL, 00000111b  ; mask all the other bits
    33 00000012 08C1                            or CL, AL  ; make bits 0-3 of CL = 0-3 of AL = 6-9 of a
    34                                          
    35                                          ; 2
    36 00000014 80C930                          or CL, 00110000b  ; make bits 4-5 = 1
    37                                          
    38                                          ; 3
    39 00000017 8A1D[02000000]                  mov BL, [b]
    40 0000001D C0E305                          shl BL, 5  ; bits 1-2 are now 6-7
    41 00000020 80E3C0                          and BL, 11000000b  ; mask all the other bits
    42 00000023 08D9                            or CL, BL  ; make bits 6-7 of CL = 6-7 of BL = 1-2 of b
    43                                          
    44                                          ; 4
    45 00000025 B800000000                      mov EAX, 0
    46 0000002A 66A1[00000000]                  mov AX, [a]  ; bits of a are now on pos 0-15 in EAX
    47 00000030 C1E008                          shl EAX, 8  ; bits 0-15 are now 8-23
    48 00000033 09C1                            or ECX, EAX  ; bits 8-23 in ECX = bits 8-23 in EAX = all bits of a
    49                                          
    50                                          ; 5
    51 00000035 B800000000                      mov EAX, 0
    52 0000003A A0[02000000]                    mov AL, [b]  ; bits of b are now on pos 0-7 in EAX
    53 0000003F C1E018                          shl EAX, 24  ; bits 0-7 are now 24-31
    54 00000042 09C1                            or ECX, EAX  ; bits 24-31 in ECX = bits 24-31 in EAX = all bits of b
    55                                          
    56 00000044 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 00000046 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
